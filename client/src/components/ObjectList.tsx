import React from "react";
import { useScene } from "@/lib/stores/useScene";
import { useEditor } from "@/lib/stores/useEditor";
import { useAssets } from "@/lib/stores/useAssets";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Trash2, Copy, Eye, EyeOff } from "lucide-react";

const ObjectList: React.FC = () => {
  const { currentScene, removeObject, updateObject } = useScene();
  const { selectedObjects, setSelectedObjects, tool, setTool } = useEditor();
  const { assets } = useAssets();

  const handleObjectSelect = (objectId: string, event: React.MouseEvent) => {
    if (event.ctrlKey || event.metaKey) {
      // Multi-select
      if (selectedObjects.includes(objectId)) {
        setSelectedObjects(selectedObjects.filter(id => id !== objectId));
      } else {
        setSelectedObjects([...selectedObjects, objectId]);
      }
    } else {
      // Single select
      setSelectedObjects([objectId]);
    }
  };

  const handleDeleteObject = (objectId: string) => {
    removeObject(objectId);
    // Remove from selection if it was selected
    setSelectedObjects(selectedObjects.filter(id => id !== objectId));
  };

  const handleDuplicateObject = (object: any) => {
    const newObject = {
      ...object,
      id: undefined, // Will be generated by addObject
      transform: {
        ...object.transform,
        position: [
          object.transform.position[0] + 1,
          object.transform.position[1],
          object.transform.position[2]
        ] as [number, number, number]
      }
    };
    
    // Add the duplicated object
    const { addObject } = useScene.getState();
    addObject(newObject);
  };

  const handleSelectAll = () => {
    setSelectedObjects(currentScene.objects.map(obj => obj.id));
  };

  const handleDeselectAll = () => {
    setSelectedObjects([]);
  };

  const getAssetName = (assetId: string) => {
    const asset = assets.find(a => a.id === assetId);
    return asset ? asset.name : 'Unknown Asset';
  };

  const getAssetCategory = (assetId: string) => {
    const asset = assets.find(a => a.id === assetId);
    return asset ? asset.category : 'Unknown';
  };

  if (currentScene.objects.length === 0) {
    return (
      <div className="h-full flex flex-col p-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Scene Objects</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center text-sm text-muted-foreground py-8">
              No objects in scene
              <br />
              <span className="text-xs">Add objects from the Assets tab</span>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col p-4">
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm flex items-center justify-between">
            Scene Objects
            <div className="flex items-center gap-2">
              <Badge variant="outline">{currentScene.objects.length}</Badge>
              {currentScene.objects.length > 0 && (
                <div className="flex gap-1">
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-6 px-2 text-xs"
                    onClick={handleSelectAll}
                  >
                    Select All
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-6 px-2 text-xs"
                    onClick={handleDeselectAll}
                  >
                    Clear
                  </Button>
                </div>
              )}
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <ScrollArea className="h-[400px]">
            <div className="space-y-2 p-4">
              {currentScene.objects.map((object) => {
                const isSelected = selectedObjects.includes(object.id);
                const assetName = getAssetName(object.assetId);
                const assetCategory = getAssetCategory(object.assetId);
                
                return (
                  <div
                    key={object.id}
                    className={`
                      p-3 rounded-lg border cursor-pointer transition-all
                      ${isSelected 
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' 
                        : 'border-border hover:border-blue-300 hover:bg-accent'
                      }
                    `}
                    onClick={(e) => handleObjectSelect(object.id, e)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium text-sm truncate">
                            {assetName}
                          </h4>
                          <Badge variant="secondary" className="text-xs">
                            {assetCategory}
                          </Badge>
                        </div>
                        
                        <div className="text-xs text-muted-foreground space-y-1">
                          <div className="font-mono">
                            ID: {object.id.slice(0, 8)}...
                          </div>
                          <div className="font-mono">
                            Pos: [{object.transform.position.map(p => p.toFixed(1)).join(', ')}]
                          </div>
                          <div className="font-mono">
                            Rot: [{object.transform.rotation.map(r => r.toFixed(1)).join(', ')}]
                          </div>
                          <div className="font-mono">
                            Scale: [{object.transform.scale.map(s => s.toFixed(1)).join(', ')}]
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex flex-col gap-1 ml-2">
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-6 w-6 p-0"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDuplicateObject(object);
                          }}
                          title="Duplicate"
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-6 w-6 p-0 text-destructive hover:text-destructive"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteObject(object.id);
                          }}
                          title="Delete"
                        >
                          <Trash2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                    
                    {isSelected && (
                      <div className="mt-2 pt-2 border-t border-blue-200 dark:border-blue-800">
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant={tool === 'move' ? 'default' : 'outline'}
                            className="h-6 text-xs"
                            onClick={(e) => {
                              e.stopPropagation();
                              setTool('move');
                            }}
                          >
                            Move
                          </Button>
                          <Button
                            size="sm"
                            variant={tool === 'rotate' ? 'default' : 'outline'}
                            className="h-6 text-xs"
                            onClick={(e) => {
                              e.stopPropagation();
                              setTool('rotate');
                            }}
                          >
                            Rotate
                          </Button>
                          <Button
                            size="sm"
                            variant={tool === 'scale' ? 'default' : 'outline'}
                            className="h-6 text-xs"
                            onClick={(e) => {
                              e.stopPropagation();
                              setTool('scale');
                            }}
                          >
                            Scale
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
      
      {/* Selection Summary */}
      {selectedObjects.length > 0 && (
        <Card className="mt-4">
          <CardContent className="p-3">
            <div className="text-sm">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium">Selected Objects</span>
                <Badge variant="default">{selectedObjects.length}</Badge>
              </div>
              <div className="text-xs text-muted-foreground">
                Current Tool: <Badge variant="outline" className="ml-1">{tool}</Badge>
              </div>
              <div className="text-xs text-muted-foreground mt-1">
                Use Ctrl+Click for multi-select
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ObjectList;
